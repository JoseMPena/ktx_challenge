c
checkout.cart
n
c
checkout.cart
n
free_items
n
checkout.cart
c
checkout.cart
n
l=
free_items
n
items.take(items.count / 2)
n
items
n
c
items
n
s
n
promo_items(checkout)
self
s
pricing_rules.reject(&:used).count
pricing_rules.count
n
checkout.cart
checkout.cart.count
n
free_items
n
s
n
promo_items(checkout)
self
s
@cart.map(&:price).reduce(:+)
c
self.product_code
self.promo_code
checkout.cart.map(&:code)
product_code
s
self
checkout.cart
promo_items(checkout)
self
s
pricing_rules.reject(&:used).count
pricing_rules.count
s
c
pricing_rules.count
c
pricing_rules.reject(&:used)
pricing_rules.count
c
result.reduce { |a, b| a && b }
result
c
exit
c
exit
c
free_items
n
free_items
items
n
s
n
type
n
promo_items(checkout)
c
pricing_rules.first.apply!(self)
self
pricing_rules.first
pricing_rules
c
*pricing_rules
pricing_rules.to_a
pricing_rules
c
7.48 * 4
(items.first.price.to_f / 3.0).round(2) * 2
(items.first.price.to_f / 3.0).round(2)
items.first.price.to_f / 3.0
items.first.price.to_f
items.first.price
items.count
c
checkout.cart.size
c
checkout.cart.count
promo_items(checkout).count
promo_items.count
c
promo_price
c
item.price
item.price = promo_price
item.price
promo_price
item.price
((item.price.to_f / 3.0) * 2)
item.price / 3
item.price / 3)
((item.price / 3) * 2)
item
c
s
free_items.count
n
(promo_items.size / 2)
n
checkout.cart.count
c
items
items.any?
self.cart.size
self.cart
c
items
c
checkout.scan free_items
checkout.cart.size
checkout.cart.sizw
free_items
n
free_items
n
c
n
(promo_items.size / 2)
n
checkout.total
checkout.cart.size
checkout.cart
checkout
c
promo_items.first.clone
promo_items.first
promo_items.first.attributes
promo_items.first
promo_items
c
promo_items
c
Checkout.new(*promo)
checkout
n
Checkout.new(*promo).scan(item)
c
co.pricing_rules.count
co.pricing_rules
n
pricing_rules.count
pricing_rules
c
item.code
